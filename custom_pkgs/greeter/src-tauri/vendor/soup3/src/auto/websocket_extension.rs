// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::{prelude::*, translate::*};
use std::{fmt, ptr};

glib::wrapper! {
    #[doc(alias = "SoupWebsocketExtension")]
    pub struct WebsocketExtension(Object<ffi::SoupWebsocketExtension, ffi::SoupWebsocketExtensionClass>);

    match fn {
        type_ => || ffi::soup_websocket_extension_get_type(),
    }
}

impl WebsocketExtension {
    pub const NONE: Option<&'static WebsocketExtension> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::WebsocketExtension>> Sealed for T {}
}

pub trait WebsocketExtensionExt: IsA<WebsocketExtension> + sealed::Sealed + 'static {
    //#[doc(alias = "soup_websocket_extension_configure")]
    //fn configure(&self, connection_type: WebsocketConnectionType, params: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 25 }/TypeId { ns_id: 0, id: 25 }) -> Result<(), glib::Error> {
    //    unsafe { TODO: call ffi:soup_websocket_extension_configure() }
    //}

    #[doc(alias = "soup_websocket_extension_get_request_params")]
    #[doc(alias = "get_request_params")]
    fn request_params(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::soup_websocket_extension_get_request_params(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "soup_websocket_extension_get_response_params")]
    #[doc(alias = "get_response_params")]
    fn response_params(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::soup_websocket_extension_get_response_params(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "soup_websocket_extension_process_incoming_message")]
    fn process_incoming_message(
        &self,
        header: &mut u8,
        payload: glib::Bytes,
    ) -> Result<glib::Bytes, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::soup_websocket_extension_process_incoming_message(
                self.as_ref().to_glib_none().0,
                header,
                payload.into_glib_ptr(),
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "soup_websocket_extension_process_outgoing_message")]
    fn process_outgoing_message(
        &self,
        header: &mut u8,
        payload: glib::Bytes,
    ) -> Result<glib::Bytes, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::soup_websocket_extension_process_outgoing_message(
                self.as_ref().to_glib_none().0,
                header,
                payload.into_glib_ptr(),
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl<O: IsA<WebsocketExtension>> WebsocketExtensionExt for O {}

impl fmt::Display for WebsocketExtension {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("WebsocketExtension")
    }
}
