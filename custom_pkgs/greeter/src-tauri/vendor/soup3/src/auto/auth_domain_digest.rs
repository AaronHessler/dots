// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{AuthDomain, ServerMessage};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "SoupAuthDomainDigest")]
    pub struct AuthDomainDigest(Object<ffi::SoupAuthDomainDigest, ffi::SoupAuthDomainDigestClass>) @extends AuthDomain;

    match fn {
        type_ => || ffi::soup_auth_domain_digest_get_type(),
    }
}

impl AuthDomainDigest {
    //#[doc(alias = "soup_auth_domain_digest_new")]
    //pub fn new(optname1: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs) -> AuthDomainDigest {
    //    unsafe { TODO: call ffi:soup_auth_domain_digest_new() }
    //}

    #[doc(alias = "soup_auth_domain_digest_set_auth_callback")]
    pub fn set_auth_callback<
        P: Fn(&AuthDomainDigest, &ServerMessage, &str) -> Option<String> + 'static,
    >(
        &self,
        callback: P,
    ) {
        let callback_data: Box_<P> = Box_::new(callback);
        unsafe extern "C" fn callback_func<
            P: Fn(&AuthDomainDigest, &ServerMessage, &str) -> Option<String> + 'static,
        >(
            domain: *mut ffi::SoupAuthDomainDigest,
            msg: *mut ffi::SoupServerMessage,
            username: *const libc::c_char,
            user_data: glib::ffi::gpointer,
        ) -> *mut libc::c_char {
            let domain = from_glib_borrow(domain);
            let msg = from_glib_borrow(msg);
            let username: Borrowed<glib::GString> = from_glib_borrow(username);
            let callback: &P = &*(user_data as *mut _);
            (*callback)(&domain, &msg, username.as_str()).to_glib_full()
        }
        let callback = Some(callback_func::<P> as _);
        unsafe extern "C" fn dnotify_func<
            P: Fn(&AuthDomainDigest, &ServerMessage, &str) -> Option<String> + 'static,
        >(
            data: glib::ffi::gpointer,
        ) {
            let _callback: Box_<P> = Box_::from_raw(data as *mut _);
        }
        let destroy_call3 = Some(dnotify_func::<P> as _);
        let super_callback0: Box_<P> = callback_data;
        unsafe {
            ffi::soup_auth_domain_digest_set_auth_callback(
                self.to_glib_none().0,
                callback,
                Box_::into_raw(super_callback0) as *mut _,
                destroy_call3,
            );
        }
    }

    //#[doc(alias = "auth-data")]
    //pub fn auth_data(&self) -> /*Unimplemented*/Basic: Pointer {
    //    ObjectExt::property(self, "auth-data")
    //}

    //#[doc(alias = "auth-data")]
    //pub fn set_auth_data(&self, auth_data: /*Unimplemented*/Basic: Pointer) {
    //    ObjectExt::set_property(self,"auth-data", auth_data)
    //}

    #[doc(alias = "soup_auth_domain_digest_encode_password")]
    pub fn encode_password(username: &str, realm: &str, password: &str) -> Option<glib::GString> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::soup_auth_domain_digest_encode_password(
                username.to_glib_none().0,
                realm.to_glib_none().0,
                password.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "auth-data")]
    pub fn connect_auth_data_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_auth_data_trampoline<F: Fn(&AuthDomainDigest) + 'static>(
            this: *mut ffi::SoupAuthDomainDigest,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::auth-data\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_auth_data_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for AuthDomainDigest {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("AuthDomainDigest")
    }
}
