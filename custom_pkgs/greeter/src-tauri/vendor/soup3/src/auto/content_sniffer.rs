// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::SessionFeature;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "SoupContentSniffer")]
    pub struct ContentSniffer(Object<ffi::SoupContentSniffer, ffi::SoupContentSnifferClass>) @implements SessionFeature;

    match fn {
        type_ => || ffi::soup_content_sniffer_get_type(),
    }
}

impl ContentSniffer {
    #[doc(alias = "soup_content_sniffer_new")]
    pub fn new() -> ContentSniffer {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::soup_content_sniffer_new()) }
    }

    //#[doc(alias = "soup_content_sniffer_sniff")]
    //pub fn sniff(&self, msg: &Message, buffer: &glib::Bytes, params: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }) -> Option<glib::GString> {
    //    unsafe { TODO: call ffi:soup_content_sniffer_sniff() }
    //}
}

impl Default for ContentSniffer {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for ContentSniffer {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ContentSniffer")
    }
}
