// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{Auth, SessionFeature};
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "SoupAuthManager")]
    pub struct AuthManager(Object<ffi::SoupAuthManager, ffi::SoupAuthManagerClass>) @implements SessionFeature;

    match fn {
        type_ => || ffi::soup_auth_manager_get_type(),
    }
}

impl AuthManager {
    #[doc(alias = "soup_auth_manager_clear_cached_credentials")]
    pub fn clear_cached_credentials(&self) {
        unsafe {
            ffi::soup_auth_manager_clear_cached_credentials(self.to_glib_none().0);
        }
    }

    #[doc(alias = "soup_auth_manager_use_auth")]
    pub fn use_auth(&self, uri: &glib::Uri, auth: &impl IsA<Auth>) {
        unsafe {
            ffi::soup_auth_manager_use_auth(
                self.to_glib_none().0,
                uri.to_glib_none().0,
                auth.as_ref().to_glib_none().0,
            );
        }
    }
}

impl fmt::Display for AuthManager {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("AuthManager")
    }
}
