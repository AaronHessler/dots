// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{Message, MessageHeaders};
use glib::{prelude::*, translate::*};
use std::{fmt, ptr};

glib::wrapper! {
    #[doc(alias = "SoupMultipartInputStream")]
    pub struct MultipartInputStream(Object<ffi::SoupMultipartInputStream, ffi::SoupMultipartInputStreamClass>) @extends gio::FilterInputStream, gio::InputStream, @implements gio::PollableInputStream;

    match fn {
        type_ => || ffi::soup_multipart_input_stream_get_type(),
    }
}

impl MultipartInputStream {
    #[doc(alias = "soup_multipart_input_stream_new")]
    pub fn new(msg: &Message, base_stream: &impl IsA<gio::InputStream>) -> MultipartInputStream {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::soup_multipart_input_stream_new(
                msg.to_glib_none().0,
                base_stream.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "soup_multipart_input_stream_get_headers")]
    #[doc(alias = "get_headers")]
    pub fn headers(&self) -> Option<MessageHeaders> {
        unsafe {
            from_glib_none(ffi::soup_multipart_input_stream_get_headers(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "soup_multipart_input_stream_next_part")]
    pub fn next_part(
        &self,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
    ) -> Result<Option<gio::InputStream>, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::soup_multipart_input_stream_next_part(
                self.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn message(&self) -> Option<Message> {
        ObjectExt::property(self, "message")
    }
}

impl fmt::Display for MultipartInputStream {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("MultipartInputStream")
    }
}
