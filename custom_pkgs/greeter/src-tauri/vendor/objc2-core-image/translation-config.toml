framework = "CoreImage"
crate = "objc2-core-image"
required-crates = ["objc2", "objc2-foundation"]
custom-lib-rs = true
macos = "10.11"
maccatalyst = "13.0"
ios = "5.0"
tvos = "9.0"
visionos = "1.0"

external.MLModel.module = "CoreML.MLModel"

# Breaks usual conventions for errors, the return value is _not_ nullable, so
# the user must always check the error variable.
class.CIFilter.methods."filterArrayFromSerializedXMP:inputImageExtent:error:".skipped = true

# Both a protocol and a class, so we use Swift's naming scheme
protocol.CIFilter.renamed = "CIFilterProtocol"

# Needs AVFoundation (cyclical)
class.CIImage.categories.AVDepthData.skipped = true
class.CIImage.categories.AVPortraitEffectsMatte.skipped = true
class.CIImage.categories.AVSemanticSegmentationMatte.skipped = true

# Needs `EAGLContext`
class.CIContext.methods."contextWithEAGLContext:".skipped = true
class.CIContext.methods."contextWithEAGLContext:options:".skipped = true

# Needs CGImagePropertyOrientation from ImageIO
class.CIContext.methods."depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:orientation:options:".skipped = true
class.CIContext.methods."depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:hairSemanticSegmentation:orientation:options:".skipped = true
class.CIContext.methods."depthBlurEffectFilterForImage:disparityImage:portraitEffectsMatte:hairSemanticSegmentation:glassesMatte:gainMap:orientation:options:".skipped = true
class.CIImage.methods."imageTransformForOrientation:".skipped = true
class.CIImage.methods."imageByApplyingCGOrientation:".skipped = true
class.CIImage.methods."imageTransformForCGOrientation:".skipped = true
class.CIRAWFilter.methods.orientation.skipped = true
class.CIRAWFilter.methods."setOrientation:".skipped = true

# Needs CGImageSourceRef from ImageIO
class.CIImage.methods."imageWithCGImageSource:index:options:".skipped = true
class.CIImage.methods."initWithCGImageSource:index:options:".skipped = true

# Needs CGLContextObj from OpenGL
class.CIContext.methods."contextWithCGLContext:pixelFormat:colorSpace:options:".skipped = true
class.CIContext.methods."contextWithCGLContext:pixelFormat:options:".skipped = true
class.CIContext.methods."contextForOfflineGPUAtIndex:colorSpace:options:sharedContext:".skipped = true
