//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
#[cfg(feature = "objc2-core-foundation")]
use objc2_core_foundation::*;
#[cfg(feature = "objc2-core-graphics")]
use objc2_core_graphics::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/coreimage/cicolor?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CIColor;
);

extern_conformance!(
    unsafe impl NSCoding for CIColor {}
);

extern_conformance!(
    unsafe impl NSCopying for CIColor {}
);

unsafe impl CopyingHelper for CIColor {
    type Result = Self;
}

extern_conformance!(
    unsafe impl NSObjectProtocol for CIColor {}
);

extern_conformance!(
    unsafe impl NSSecureCoding for CIColor {}
);

impl CIColor {
    extern_methods!(
        #[cfg(feature = "objc2-core-graphics")]
        #[unsafe(method(colorWithCGColor:))]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithCGColor(c: &CGColor) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(colorWithRed:green:blue:alpha:))]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithRed_green_blue_alpha(
            r: CGFloat,
            g: CGFloat,
            b: CGFloat,
            a: CGFloat,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(colorWithRed:green:blue:))]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithRed_green_blue(r: CGFloat, g: CGFloat, b: CGFloat)
            -> Retained<Self>;

        #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-graphics"))]
        #[unsafe(method(colorWithRed:green:blue:alpha:colorSpace:))]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithRed_green_blue_alpha_colorSpace(
            r: CGFloat,
            g: CGFloat,
            b: CGFloat,
            a: CGFloat,
            color_space: &CGColorSpace,
        ) -> Option<Retained<Self>>;

        #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-graphics"))]
        #[unsafe(method(colorWithRed:green:blue:colorSpace:))]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithRed_green_blue_colorSpace(
            r: CGFloat,
            g: CGFloat,
            b: CGFloat,
            color_space: &CGColorSpace,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(colorWithString:))]
        #[unsafe(method_family = none)]
        pub unsafe fn colorWithString(representation: &NSString) -> Retained<Self>;

        #[cfg(feature = "objc2-core-graphics")]
        #[unsafe(method(initWithCGColor:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithCGColor(this: Allocated<Self>, c: &CGColor) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(initWithRed:green:blue:alpha:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithRed_green_blue_alpha(
            this: Allocated<Self>,
            r: CGFloat,
            g: CGFloat,
            b: CGFloat,
            a: CGFloat,
        ) -> Retained<Self>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(initWithRed:green:blue:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithRed_green_blue(
            this: Allocated<Self>,
            r: CGFloat,
            g: CGFloat,
            b: CGFloat,
        ) -> Retained<Self>;

        #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-graphics"))]
        #[unsafe(method(initWithRed:green:blue:alpha:colorSpace:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithRed_green_blue_alpha_colorSpace(
            this: Allocated<Self>,
            r: CGFloat,
            g: CGFloat,
            b: CGFloat,
            a: CGFloat,
            color_space: &CGColorSpace,
        ) -> Option<Retained<Self>>;

        #[cfg(all(feature = "objc2-core-foundation", feature = "objc2-core-graphics"))]
        #[unsafe(method(initWithRed:green:blue:colorSpace:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithRed_green_blue_colorSpace(
            this: Allocated<Self>,
            r: CGFloat,
            g: CGFloat,
            b: CGFloat,
            color_space: &CGColorSpace,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(numberOfComponents))]
        #[unsafe(method_family = none)]
        pub unsafe fn numberOfComponents(&self) -> usize;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(components))]
        #[unsafe(method_family = none)]
        pub unsafe fn components(&self) -> NonNull<CGFloat>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(alpha))]
        #[unsafe(method_family = none)]
        pub unsafe fn alpha(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-graphics")]
        #[unsafe(method(colorSpace))]
        #[unsafe(method_family = none)]
        pub unsafe fn colorSpace(&self) -> Retained<CGColorSpace>;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(red))]
        #[unsafe(method_family = none)]
        pub unsafe fn red(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(green))]
        #[unsafe(method_family = none)]
        pub unsafe fn green(&self) -> CGFloat;

        #[cfg(feature = "objc2-core-foundation")]
        #[unsafe(method(blue))]
        #[unsafe(method_family = none)]
        pub unsafe fn blue(&self) -> CGFloat;

        #[unsafe(method(stringRepresentation))]
        #[unsafe(method_family = none)]
        pub unsafe fn stringRepresentation(&self) -> Retained<NSString>;

        #[unsafe(method(blackColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn blackColor() -> Retained<CIColor>;

        #[unsafe(method(whiteColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn whiteColor() -> Retained<CIColor>;

        #[unsafe(method(grayColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn grayColor() -> Retained<CIColor>;

        #[unsafe(method(redColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn redColor() -> Retained<CIColor>;

        #[unsafe(method(greenColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn greenColor() -> Retained<CIColor>;

        #[unsafe(method(blueColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn blueColor() -> Retained<CIColor>;

        #[unsafe(method(cyanColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn cyanColor() -> Retained<CIColor>;

        #[unsafe(method(magentaColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn magentaColor() -> Retained<CIColor>;

        #[unsafe(method(yellowColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn yellowColor() -> Retained<CIColor>;

        #[unsafe(method(clearColor))]
        #[unsafe(method_family = none)]
        pub unsafe fn clearColor() -> Retained<CIColor>;
    );
}

/// Methods declared on superclass `NSObject`.
impl CIColor {
    extern_methods!(
        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;
    );
}
