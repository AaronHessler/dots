//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use core::ptr::NonNull;
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_protocol!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nstextlocation?language=objc)
    pub unsafe trait NSTextLocation: NSObjectProtocol {
        #[unsafe(method(compare:))]
        #[unsafe(method_family = none)]
        unsafe fn compare(
            &self,
            location: &ProtocolObject<dyn NSTextLocation>,
        ) -> NSComparisonResult;
    }
);

extern_class!(
    /// [Apple's documentation](https://developer.apple.com/documentation/appkit/nstextrange?language=objc)
    #[unsafe(super(NSObject))]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSTextRange;
);

extern_conformance!(
    unsafe impl NSObjectProtocol for NSTextRange {}
);

impl NSTextRange {
    extern_methods!(
        #[unsafe(method(initWithLocation:endLocation:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithLocation_endLocation(
            this: Allocated<Self>,
            location: &ProtocolObject<dyn NSTextLocation>,
            end_location: Option<&ProtocolObject<dyn NSTextLocation>>,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(initWithLocation:))]
        #[unsafe(method_family = init)]
        pub unsafe fn initWithLocation(
            this: Allocated<Self>,
            location: &ProtocolObject<dyn NSTextLocation>,
        ) -> Retained<Self>;

        #[unsafe(method(init))]
        #[unsafe(method_family = init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[unsafe(method(new))]
        #[unsafe(method_family = new)]
        pub unsafe fn new() -> Retained<Self>;

        #[unsafe(method(isEmpty))]
        #[unsafe(method_family = none)]
        pub unsafe fn isEmpty(&self) -> bool;

        #[unsafe(method(location))]
        #[unsafe(method_family = none)]
        pub unsafe fn location(&self) -> Retained<ProtocolObject<dyn NSTextLocation>>;

        #[unsafe(method(endLocation))]
        #[unsafe(method_family = none)]
        pub unsafe fn endLocation(&self) -> Retained<ProtocolObject<dyn NSTextLocation>>;

        #[unsafe(method(isEqualToTextRange:))]
        #[unsafe(method_family = none)]
        pub unsafe fn isEqualToTextRange(&self, text_range: &NSTextRange) -> bool;

        #[unsafe(method(containsLocation:))]
        #[unsafe(method_family = none)]
        pub unsafe fn containsLocation(
            &self,
            location: &ProtocolObject<dyn NSTextLocation>,
        ) -> bool;

        #[unsafe(method(containsRange:))]
        #[unsafe(method_family = none)]
        pub unsafe fn containsRange(&self, text_range: &NSTextRange) -> bool;

        #[unsafe(method(intersectsWithTextRange:))]
        #[unsafe(method_family = none)]
        pub unsafe fn intersectsWithTextRange(&self, text_range: &NSTextRange) -> bool;

        #[unsafe(method(textRangeByIntersectingWithTextRange:))]
        #[unsafe(method_family = none)]
        pub unsafe fn textRangeByIntersectingWithTextRange(
            &self,
            text_range: &NSTextRange,
        ) -> Option<Retained<Self>>;

        #[unsafe(method(textRangeByFormingUnionWithTextRange:))]
        #[unsafe(method_family = none)]
        pub unsafe fn textRangeByFormingUnionWithTextRange(
            &self,
            text_range: &NSTextRange,
        ) -> Retained<Self>;
    );
}
